// Code generated by MockGen. DO NOT EDIT.
// Source: ./scouter.go

// Package testdata is a generated GoMock package.
package testdata

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockScouter is a mock of Scouter interface.
type MockScouter struct {
	ctrl     *gomock.Controller
	recorder *MockScouterMockRecorder
}

// MockScouterMockRecorder is the mock recorder for MockScouter.
type MockScouterMockRecorder struct {
	mock *MockScouter
}

// NewMockScouter creates a new mock instance.
func NewMockScouter(ctrl *gomock.Controller) *MockScouter {
	mock := &MockScouter{ctrl: ctrl}
	mock.recorder = &MockScouterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScouter) EXPECT() *MockScouterMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockScouter) GetAll(titles []string, in string) (map[string]map[string]float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", titles, in)
	ret0, _ := ret[0].(map[string]map[string]float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockScouterMockRecorder) GetAll(titles, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockScouter)(nil).GetAll), titles, in)
}

// GetSpecial mocks base method.
func (m *MockScouter) GetSpecial(title, in string) (map[string]float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpecial", title, in)
	ret0, _ := ret[0].(map[string]float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpecial indicates an expected call of GetSpecial.
func (mr *MockScouterMockRecorder) GetSpecial(title, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpecial", reflect.TypeOf((*MockScouter)(nil).GetSpecial), title, in)
}
